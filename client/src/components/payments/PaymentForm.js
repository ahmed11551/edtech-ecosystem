import React, { useState, useEffect } from 'react';
import './PaymentForm.css';

const PaymentForm = ({ course, onPaymentSuccess, onCancel }) => {
  const [selectedProvider, setSelectedProvider] = useState('yookassa');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
  const paymentProviders = [
    {
      id: 'yookassa',
      name: '–ÆKassa',
      description: '–ë—ã—Å—Ç—Ä—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
      icon: 'üí≥',
      popular: true
    },
    {
      id: 'sberbank',
      name: '–°–±–µ—Ä–±–∞–Ω–∫',
      description: '–ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –°–±–µ—Ä–±–∞–Ω–∫',
      icon: 'üè¶',
      popular: true
    },
    {
      id: 'tinkoff',
      name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
      description: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫',
      icon: 'üü°',
      popular: true
    },
    {
      id: 'robokassa',
      name: '–†–æ–±–æ–∫–∞—Å—Å–∞',
      description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
      icon: 'ü§ñ'
    },
    {
      id: 'qiwi',
      name: 'QIWI',
      description: '–ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ QIWI',
      icon: 'üí∞'
    },
    {
      id: 'webmoney',
      name: 'WebMoney',
      description: 'WebMoney –∫–æ—à–µ–ª–µ–∫',
      icon: 'üåê'
    }
  ];

  const handlePayment = async () => {
    if (!course) return;

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/payments/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-auth-token': localStorage.getItem('token')
        },
        body: JSON.stringify({
          courseId: course._id,
          provider: selectedProvider,
          amount: course.price,
          currency: 'RUB'
        })
      });

      const data = await response.json();

      if (data.success) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
        window.open(data.payment.paymentUrl, '_blank');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        checkPaymentStatus(data.payment.id);
      } else {
        setError(data.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  const checkPaymentStatus = async (paymentId) => {
    const maxAttempts = 30; // 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    let attempts = 0;

    const checkStatus = async () => {
      try {
        const response = await fetch(`/api/payments/status/${paymentId}`, {
          headers: {
            'x-auth-token': localStorage.getItem('token')
          }
        });

        const data = await response.json();

        if (data.success) {
          if (data.payment.status === 'paid') {
            onPaymentSuccess(data.payment);
            return;
          } else if (data.payment.status === 'failed' || data.payment.status === 'cancelled') {
            setError('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
            return;
          }
        }

        attempts++;
        if (attempts < maxAttempts) {
          setTimeout(checkStatus, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        } else {
          setError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ');
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', err);
      }
    };

    checkStatus();
  };

  if (!course) return null;

  return (
    <div className="payment-form-overlay">
      <div className="payment-form">
        <div className="payment-header">
          <h2>üí≥ –û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞</h2>
          <button className="close-btn" onClick={onCancel}>√ó</button>
        </div>

        <div className="course-info">
          <h3>{course.title}</h3>
          <p className="course-description">{course.description}</p>
          <div className="price">
            <span className="amount">{course.price.toLocaleString()} ‚ÇΩ</span>
            <span className="currency">RUB</span>
          </div>
        </div>

        <div className="payment-providers">
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</h4>
          <div className="providers-grid">
            {paymentProviders.map(provider => (
              <div
                key={provider.id}
                className={`provider-card ${selectedProvider === provider.id ? 'selected' : ''} ${provider.popular ? 'popular' : ''}`}
                onClick={() => setSelectedProvider(provider.id)}
              >
                <div className="provider-icon">{provider.icon}</div>
                <div className="provider-info">
                  <div className="provider-name">{provider.name}</div>
                  <div className="provider-description">{provider.description}</div>
                </div>
                {provider.popular && <div className="popular-badge">–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</div>}
              </div>
            ))}
          </div>
        </div>

        {error && (
          <div className="error-message">
            ‚ö†Ô∏è {error}
          </div>
        )}

        <div className="payment-actions">
          <button 
            className="cancel-btn" 
            onClick={onCancel}
            disabled={isLoading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            className="pay-btn" 
            onClick={handlePayment}
            disabled={isLoading}
          >
            {isLoading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...' : `üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${course.price.toLocaleString()} ‚ÇΩ`}
          </button>
        </div>

        <div className="payment-security">
          <div className="security-badges">
            <span>üîí SSL –∑–∞—â–∏—Ç–∞</span>
            <span>üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</span>
            <span>‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞</span>
          </div>
          <p className="security-text">
            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. 
            –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç.
          </p>
        </div>
      </div>
    </div>
  );
};

export default PaymentForm;
