import React, { useState, useEffect } from 'react';
import './PaymentHistory.css';

const PaymentHistory = () => {
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filters, setFilters] = useState({
    status: '',
    provider: '',
    page: 1
  });

  useEffect(() => {
    fetchPayments();
  }, [filters]);

  const fetchPayments = async () => {
    try {
      setLoading(true);
      const queryParams = new URLSearchParams();
      if (filters.status) queryParams.append('status', filters.status);
      if (filters.provider) queryParams.append('provider', filters.provider);
      queryParams.append('page', filters.page);
      queryParams.append('limit', '10');

      const response = await fetch(`/api/payments/history?${queryParams}`, {
        headers: {
          'x-auth-token': localStorage.getItem('token')
        }
      });

      const data = await response.json();

      if (data.success) {
        setPayments(data.payments);
      } else {
        setError(data.message);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'paid': return '‚úÖ';
      case 'pending': return '‚è≥';
      case 'failed': return '‚ùå';
      case 'cancelled': return 'üö´';
      case 'refunded': return '‚Ü©Ô∏è';
      default: return '‚ùì';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
      case 'failed': return '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      case 'refunded': return '–í–æ–∑–≤—Ä–∞—â–µ–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getProviderIcon = (provider) => {
    switch (provider) {
      case 'yookassa': return 'üí≥';
      case 'sberbank': return 'üè¶';
      case 'tinkoff': return 'üü°';
      case 'robokassa': return 'ü§ñ';
      case 'qiwi': return 'üí∞';
      case 'webmoney': return 'üåê';
      default: return 'üí≥';
    }
  };

  const getProviderName = (provider) => {
    switch (provider) {
      case 'yookassa': return '–ÆKassa';
      case 'sberbank': return '–°–±–µ—Ä–±–∞–Ω–∫';
      case 'tinkoff': return '–¢–∏–Ω—å–∫–æ—Ñ—Ñ';
      case 'robokassa': return '–†–æ–±–æ–∫–∞—Å—Å–∞';
      case 'qiwi': return 'QIWI';
      case 'webmoney': return 'WebMoney';
      default: return provider;
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="payment-history">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="payment-history">
      <div className="history-header">
        <h1>üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</h1>
        <p>–í—Å–µ –≤–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏</p>
      </div>

      <div className="filters">
        <div className="filter-group">
          <label>–°—Ç–∞—Ç—É—Å:</label>
          <select 
            value={filters.status} 
            onChange={(e) => setFilters({...filters, status: e.target.value, page: 1})}
          >
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="paid">–û–ø–ª–∞—á–µ–Ω</option>
            <option value="pending">–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</option>
            <option value="failed">–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</option>
            <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
            <option value="refunded">–í–æ–∑–≤—Ä–∞—â–µ–Ω</option>
          </select>
        </div>

        <div className="filter-group">
          <label>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</label>
          <select 
            value={filters.provider} 
            onChange={(e) => setFilters({...filters, provider: e.target.value, page: 1})}
          >
            <option value="">–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã</option>
            <option value="yookassa">–ÆKassa</option>
            <option value="sberbank">–°–±–µ—Ä–±–∞–Ω–∫</option>
            <option value="tinkoff">–¢–∏–Ω—å–∫–æ—Ñ—Ñ</option>
            <option value="robokassa">–†–æ–±–æ–∫–∞—Å—Å–∞</option>
            <option value="qiwi">QIWI</option>
            <option value="webmoney">WebMoney</option>
          </select>
        </div>
      </div>

      {error && (
        <div className="error-message">
          ‚ö†Ô∏è {error}
        </div>
      )}

      <div className="payments-list">
        {payments.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üí≥</div>
            <h3>–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
            <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π</p>
          </div>
        ) : (
          payments.map((payment) => (
            <div key={payment.id} className="payment-card">
              <div className="payment-info">
                <div className="payment-header">
                  <div className="payment-id">
                    #{payment.id.slice(-8)}
                  </div>
                  <div className={`payment-status ${payment.status}`}>
                    {getStatusIcon(payment.status)} {getStatusText(payment.status)}
                  </div>
                </div>
                
                <div className="payment-details">
                  <div className="course-info">
                    <h4>{payment.metadata?.courseTitle || '–ö—É—Ä—Å'}</h4>
                    <p>{payment.metadata?.userEmail || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
                  </div>
                  
                  <div className="payment-amount">
                    <span className="amount">{payment.amount.toLocaleString()} ‚ÇΩ</span>
                    <span className="currency">{payment.currency}</span>
                  </div>
                </div>

                <div className="payment-meta">
                  <div className="provider">
                    {getProviderIcon(payment.provider)} {getProviderName(payment.provider)}
                  </div>
                  <div className="date">
                    {formatDate(payment.createdAt)}
                  </div>
                </div>
              </div>

              {payment.status === 'paid' && (
                <div className="payment-actions">
                  <button className="download-btn">
                    üìÑ –°–∫–∞—á–∞—Ç—å —á–µ–∫
                  </button>
                </div>
              )}
            </div>
          ))
        )}
      </div>

      <div className="pagination">
        <button 
          className="page-btn"
          disabled={filters.page === 1}
          onClick={() => setFilters({...filters, page: filters.page - 1})}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        
        <span className="page-info">
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ {filters.page}
        </span>
        
        <button 
          className="page-btn"
          disabled={payments.length < 10}
          onClick={() => setFilters({...filters, page: filters.page + 1})}
        >
          –í–ø–µ—Ä–µ–¥ ‚Üí
        </button>
      </div>
    </div>
  );
};

export default PaymentHistory;
