version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: edtech-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: edtech_ecosystem
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - edtech-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: edtech-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - edtech-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: edtech-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_ROOT_PASSWORD}@mongodb:27017/edtech_ecosystem?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CLIENT_URL: https://${DOMAIN_NAME}
      YOOKASSA_SHOP_ID: ${YOOKASSA_SHOP_ID}
      YOOKASSA_SECRET_KEY: ${YOOKASSA_SECRET_KEY}
      SBERBANK_USERNAME: ${SBERBANK_USERNAME}
      SBERBANK_PASSWORD: ${SBERBANK_PASSWORD}
      TINKOFF_TERMINAL_KEY: ${TINKOFF_TERMINAL_KEY}
      TINKOFF_PASSWORD: ${TINKOFF_PASSWORD}
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - edtech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: edtech-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: https://${DOMAIN_NAME}/api
      REACT_APP_QUANTUM_AI_URL: https://${DOMAIN_NAME}/api/quantum-ai
      REACT_APP_METAVERSE_URL: https://${DOMAIN_NAME}/metaverse
      REACT_APP_NEURAL_URL: https://${DOMAIN_NAME}/neural
      REACT_APP_HOLOGRAM_URL: https://${DOMAIN_NAME}/hologram
      REACT_APP_MENTORS_URL: https://${DOMAIN_NAME}/mentors
      REACT_APP_ANALYTICS_URL: https://${DOMAIN_NAME}/analytics
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - edtech-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: edtech-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - frontend
      - backend
    networks:
      - edtech-network

  # PM2 Process Manager
  pm2:
    build:
      context: .
      dockerfile: Dockerfile.pm2
    container_name: edtech-pm2
    restart: unless-stopped
    environment:
      NODE_ENV: production
    volumes:
      - ./ecosystem.config.js:/app/ecosystem.config.js
      - ./logs:/app/logs
    depends_on:
      - backend
      - frontend
    networks:
      - edtech-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: edtech-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - edtech-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: edtech-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - edtech-network

  # Log Management with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: edtech-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - edtech-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: edtech-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/edtech
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - edtech-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: edtech-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - edtech-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  edtech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
